# name: Deploy LiveKit Online Charts

# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Deployment environment'
#         required: true
#         type: choice
#         options:
#           - sandbox
#           - live
#       action:
#         description: 'Action to perform'
#         required: true
#         type: choice
#         options:
#           - install
#           - upgrade
#           - uninstall
#       component:
#         description: 'Component to deploy'
#         required: true
#         type: choice
#         options:
#           - livekit-server
#           - livekit-egress
#           - both

# env:
#   AWS_REGION: ${{ var.AWS_REGION }}
#   EKS_CLUSTER_NAME: ${{ var.EKS_CLUSTER_NAME }}
#   NAMESPACE: livekit

# jobs:
#   deploy-livekit:
#     runs-on: ubuntu-latest
#     environment: ${{ github.event.inputs.environment }}
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

#     - name: Set up kubeconfig for EKS
#       uses: silverlyra/setup-aws-eks@v0.1
#       with:
#         cluster-name: ${{ env.EKS_CLUSTER_NAME }}

#     - name: Add LiveKit Helm repository
#       if: github.event.inputs.action != 'uninstall'
#       run: |
#         helm repo add livekit https://helm.livekit.io
#         helm repo update


#     - name: Create TLS secret
#       if: github.event.inputs.action != 'uninstall'
#       run: |
#         # Create temporary files for cert and key from base64-encoded secrets
#         echo "${{ secrets.TLS_CERT }}" | base64 -d > /tmp/tls.crt
#         echo "${{ secrets.TLS_KEY }}" | base64 -d > /tmp/tls.key

#         # Create or update the TLS secret
#         kubectl create secret tls turn-cert \
#           --cert /tmp/tls.crt \
#           --key /tmp/tls.key \
#           --namespace ${{ env.NAMESPACE }} \
#           --dry-run=client -o yaml | kubectl apply -f -
        
#         # Clean up temporary files
#         rm -f /tmp/tls.crt /tmp/tls.key

#     - name: Deploy LiveKit Server
#       if: |
#         github.event.inputs.action != 'uninstall' && 
#         (github.event.inputs.component == 'livekit-server' || github.event.inputs.component == 'both')
#       run: |
#         ACTION=${{ github.event.inputs.action }}
#         if [ "$ACTION" = "install" ]; then
#           HELM_CMD="install"
#         else
#           HELM_CMD="upgrade"
#         fi
        
#         helm $HELM_CMD livekit-server livekit/livekit-server \
#           --namespace ${{ env.NAMESPACE }} \
#           --create-namespace \
#           --values helm/values/livekit-server-values.yaml \
#           --set egress.api_key=${{ secrets.LIVEKIT_API_KEY }} \
#           --set egress.api_secret=${{ secrets.LIVEKIT_API_SECRET }} \
#           --wait \
#           --timeout 10m

#     - name: Deploy LiveKit Egress
#       if: |
#         github.event.inputs.action != 'uninstall' && 
#         (github.event.inputs.component == 'livekit-egress' || github.event.inputs.component == 'both')
#       run: |
#         ACTION=${{ github.event.inputs.action }}
#         if [ "$ACTION" = "install" ]; then
#           HELM_CMD="install"
#         else
#           HELM_CMD="upgrade"
#         fi
        
#         helm $HELM_CMD livekit-egress livekit/egress \
#           --namespace ${{ env.NAMESPACE }} \
#           --create-namespace \
#           --values helm/values/livekit-egress-values.yaml \
#           --set serviceAccount.name=livekit-egress \
#           --set serviceAccount.create=true \
#           --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=${{ secrets.EGRESS_ROLE_ARN }} \
#           --set livekit.keys.sandbox-key=${{ secrets.LIVEKIT_API_SECRET }} \
#           --wait \  
#           --timeout 10m

#     - name: Uninstall LiveKit Server
#       if: |
#         github.event.inputs.action == 'uninstall' && 
#         (github.event.inputs.component == 'livekit-server' || github.event.inputs.component == 'both')
#       run: |
#         helm uninstall livekit-server --namespace ${{ env.NAMESPACE }} || echo "livekit-server not found"

#     - name: Uninstall LiveKit Egress
#       if: |
#         github.event.inputs.action == 'uninstall' && 
#         (github.event.inputs.component == 'livekit-egress' || github.event.inputs.component == 'both')
#       run: |
#         helm uninstall livekit-egress --namespace ${{ env.NAMESPACE }} || echo "livekit-egress not found"
